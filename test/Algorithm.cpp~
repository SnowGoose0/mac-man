#include "Algorithm.hpp"

int heuristic(const Point& p1, const Point& p2) {
  return p2 - p1;
}

Graph::Graph(Map& m) {
  _graph = m.mapParsed;
}

std::vector<Point>
Graph::aStar(Point& start, Point& end) {
  std::vector<Point> path;
  std::priority_queue<Point> pq;
  
  pq.push(start);

  while (pq.size() > 0) {
	
  }

  return path;
}

std::vector<Point>
Graph::computePath(int x1, int y1, int x2, int y2) {
  struct Point p1 = {x1, y1};
  struct Point p2 = {x2, y2};

  return aStar(p1, p2);
}

std::vector<Point>
Graph::computePath(sf::Vector2f& start, sf::Vector2f& end) {
  struct Point p1 = {(int) start.x, (int) start.y};
  struct Point p2 = {(int) end.x, (int) end.y};
  return aStar(p1, p2);
}
