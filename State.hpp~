class StateManager {
public:

  StateManager(sf::RenderWindow& win) : window(win) {

  }

  ~StateManager() {}
  
  void pushState(GameState* state) {
	if (states.empty()) state->enter();
	
	states.push(state);
  }
  
  void popState() {
	if (states.empty()) return;
	
	GameState* obsoleteState = states.top();
	states.pop();
	delete obsoleteState;

	if (states.empty()) window.close();
  }
  
  void update(float dt) {
	states.top()->update(dt);
  }
  
  void draw() {
	states.top()->draw();
	
	window.display();
	window.clear(sf::Color::Black);
  }

private:
  sf::RenderWindow& window;
  std::stack<GameState*> states;
};
